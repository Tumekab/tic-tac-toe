{"version":3,"sources":["components/Cell/Cell.js","components/Board/Board.js","components/Results/Results.js","utilities/WinnerCalculater.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","cellClasses","classNames","cell","winner","canHighlight","cellContentClasses","populated","value","className","onClick","Board","cells","cellValues","map","index","winningCombination","indexOf","onCellClicked","id","Results","resultClasses","isGameOver","message","onNewGameClicked","winningMatrix","0","1","2","3","4","5","6","7","8","Game","useState","setCellValues","xIsNext","setXIsNext","setIsGameOver","numberOfTurnsLeft","setNumberOfTurnsLeft","setWinner","setWinningCombination","cellIndex","isCellEmpty","newCellValues","newNumberOfTurnsLeft","calcResult","winningRanges","i","length","currentValue","firstOption","secondOption","hasResult","undefined","calculateWinner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1be4755.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './Cell.css';\n\n\nexport const Cell = (props) => {\n\n    // to handle classes on elements\n\n    const cellClasses = classNames ({\n        cell: true,\n        winner: props.canHighlight\n    });\n\n    const cellContentClasses = classNames ({\n        'cell-content': true,\n        populated: props.value\n    });\n\n  return (\n    <button className={ cellClasses } onClick={ props.onClick }>\n        <span className={ cellContentClasses }>{ props.value }</span>\n    </button>\n  );\n}\n\n//only want populated class on when something is in the cell","import React from 'react';\nimport './Board.css';\n\nimport { Cell } from '../Cell/Cell'\n\nexport const Board = (props) => {\n\n    //map over the cells\n    const cells = props.cellValues.map((value, index) => {\n        const canHighlight = props.winningCombination && props.winningCombination.indexOf(index) >= 0;\n\n        return <Cell \n                  key={ index } \n                  value={ value } \n                  canHighlight={ canHighlight }\n                  onClick={() => props.onCellClicked(index)}\n                />\n    });\n\n\n  return (\n    <div id=\"board\">\n        { cells }\n    </div>\n  );\n}","import React from 'react';\nimport classNames from 'classnames';\nimport './Results.css';\n\nexport const Results = (props) => {\n\n    const resultClasses = classNames({\n        'modal-open': props.isGameOver\n    })\n\n    const message = props.winner ? `Winner is ${ props.winner }.` : 'Its a tie.';\n\n    return (\n        <div id=\"modal-overlay\" className={ resultClasses }>\n            <div id=\"game-result-modal\">\n                <div id=\"result-container\">\n                    <div id=\"winner-container\">\n                        <span>{ message }</span>\n                    </div>\n                </div>\n            <div id=\"new-game-container\">\n                <button \n                    id=\"new-game-button\"\n                    onClick={ props.onNewGameClicked }>Start New Game</button>\n            </div>\n        </div>\n    </div>\n    );\n}","\n//all possible combinations for cells that can win using the cell indexes\nconst winningMatrix = {\n    0: [[1,2],[3,6],[4,8]],\n    1: [[0,2],[4,7]],\n    2: [[0,1],[5,8],[4,6]],\n    3: [[0,6],[4,5]],\n    4: [[2,6],[3,5],[1,7],[0,8]],\n    5: [[3,4],[2,8]],\n    6: [[7,8],[0,3],[2,4]],\n    7: [[6,8],[1,4]],\n    8: [[6,7],[2,5],[0,4]]\n};\n\nexport const calculateWinner = (cellValues, newNumberOfTurnsLeft, cellIndex) => {\n    \n    const winningRanges = winningMatrix[cellIndex];\n\n    for(let i = 0; i < winningRanges.length; i++){\n        const currentValue = cellValues[cellIndex];\n        const firstOption = cellValues[winningRanges[i][0]];\n        const secondOption = cellValues[winningRanges[i][1]];\n\n        if(currentValue === firstOption && firstOption === secondOption) {\n            return {\n                hasResult: true,\n                winner: currentValue,\n                winningCombination: [cellIndex, winningRanges[i][0], winningRanges[i][1]]\n            }\n        }\n    }\n\n    //determines what happens when there is a tie\n    if (newNumberOfTurnsLeft === 0) {\n        return {\n            hasResult: true,\n            winner: undefined,\n            winningCombination: []\n        }\n    }\n\n    return {\n        hasResult: false,\n        winner: undefined,\n        winningCombination: []\n    };\n};","import React, { useState } from 'react';\nimport './Game.css';\n\nimport { Board } from '../Board/Board';\nimport { Results } from '../Results/Results';\nimport { calculateWinner } from '../../utilities/WinnerCalculater';\n\nexport const Game = () => { \n\n    //create local states\n    const [cellValues, setCellValues] = useState(['', '', '', '', '', '', '', '', '']);\n    const [xIsNext, setXIsNext] = useState(true);\n    const [isGameOver, setIsGameOver] = useState(false);\n    const [numberOfTurnsLeft, setNumberOfTurnsLeft] = useState(9);\n    const [winner, setWinner] = useState();\n    const [winningCombination, setWinningCombination] = useState([]);\n    \n    //helps to keep populated cells from being toggled again\n    const isCellEmpty = (cellIndex) => cellValues[cellIndex] === '';\n\n    const restartGame = () => {\n\n        setCellValues(['', '', '', '', '', '', '', '', '']);\n        setXIsNext(true);\n        setIsGameOver(false);\n        setNumberOfTurnsLeft(9);\n        setWinner(undefined);\n        setWinningCombination([]);\n    }\n\n    //creating a clicked event and using the cell value and create a new array\n    //creates turns using bang operator to switch from X to O\n    // X will always go first\n    //if statement stops the toggle happening once a cell has been populated\n    const onCellClicked = (cellIndex) => {\n        if (isCellEmpty(cellIndex)) {\n            const newCellValues = [...cellValues];\n\n            newCellValues[cellIndex] = xIsNext ? 'X' : 'O';\n\n            const newNumberOfTurnsLeft = numberOfTurnsLeft - 1;\n\n            //calculate the result\n            const calcResult = calculateWinner(newCellValues, newNumberOfTurnsLeft, cellIndex);\n            \n            setCellValues(newCellValues);\n            setXIsNext(!xIsNext);\n            setIsGameOver(calcResult.hasResult);\n            setNumberOfTurnsLeft(newNumberOfTurnsLeft);\n            setWinner(calcResult.winner);\n            setWinningCombination(calcResult.winningCombination);\n        }\n    };\n\n  return (\n    <>\n      <div id=\"game\">\n        <h1>Tic Tac Toe</h1>\n        <Board \n            cellValues={ cellValues } \n            winningCombination={ winningCombination}\n            onCellClicked={ onCellClicked }\n        />\n      </div>\n        <Results \n            isGameOver={ isGameOver }\n            winner={ winner }\n            onNewGameClicked={ restartGame }\n        />\n    </>\n  );\n}","import React from 'react';\n\nimport { Game } from './components/Game/Game';\n\nfunction App() {\n  return (\n    <>\n      <Game />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}